import { combineLatest, Observable } from 'rxjs';import { distinctUntilChanged, map } from 'rxjs/operators';export const allTrue = (...observables: Array<Observable<boolean>>) => combineLatest(observables)  .pipe(map(values => values.every(v => v === true)), distinctUntilChanged());export const allFalse = (...observables: Array<Observable<boolean>>) => combineLatest(observables)  .pipe(map(values => values.every(v => v === false)), distinctUntilChanged());export const anyTrue = (...observables: Array<Observable<boolean>>) => combineLatest(observables)  .pipe(map(values => values.find(v => v === true) !== undefined), distinctUntilChanged());export const anyFalse = (...observables: Array<Observable<boolean>>) => combineLatest(observables)  .pipe(map(values => values.find(v => v === false) !== undefined), distinctUntilChanged());